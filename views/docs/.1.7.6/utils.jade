extends ../../layouts/with-sidebar

block documentation
  section
    div
      h2 Utils

      p
        | Sequelize comes with some handy utils including references to
        code lodash
        | as well as some individual helpers&period; You can access them via
        code Sequelize&period;Utils
        | &period;


      h3#lodash-js Lodash.js
      p You can access all the methods of lodash like this&colon;
      pre.dark-blue
        code.javascript
          | Sequelize.Utils._.each(/* ... */)
          | Sequelize.Utils._.map(/* ... */)
          | Sequelize.Utils._...

      p
        | Also Sequelize ships the Underscore extension
        code underscore&period;string
        | &comma; which allows nifty string manipulation&colon;
      pre.dark-blue
        code.javascript
          | Sequelize.Utils._.camelize('something') // Something

      p
        | Check out the page of&nbsp;
        a(href='http://lodash.com/', rel='nofollow', target='_blank') Lodash
        | &comma;&nbsp;
        a(href='http://underscorejs.org/', rel='nofollow', target='_blank') Underscore
        | &nbsp;and&nbsp;
        a(href='https://github.com/epeli/underscore.string', rel='nofollow', target='_blank') underscore&period;string
        | &nbsp;for further information&period;


      h3#querychainer QueryChainer
      p
        | Because you will want to save&sol;create&sol;delete several items at once and just go on after all of them are saved&comma; Sequelize provides the
        code QueryChainer
        | module&period; It can be used like this&colon;
      pre.dark-blue
        code.javascript
          | var chainer = new Sequelize.Utils.QueryChainer
          | chainer.add(/* Query | EventEmitter */)
          | chainer.run().success(function(){}).error(function(errors){})

      p And a real world example&colon;
      pre.dark-blue
        code.javascript
          | var chainer = new Sequelize.Utils.QueryChainer
          | var Task    = sequelize.define('Task', /* ... */)
          | &nbsp;
          | chainer
          |   .add(Task.drop())
          |   .add(Task.sync())
          | &nbsp;
          | for(var i = 0; i < 20; i++)
          |   chainer.add(Task.create({}))
          | &nbsp;
          | chainer
          |   .run()
          |   .success(function(){})
          |   .error(function(errors){})

      p
        | It is also possible to force a serial run of the query chainer by using the following syntax:
      pre.dark-blue
        code.javascript
          | new Sequelize.Utils.QueryChainer()
          |   .add(Model, 'function', [param1, param2])
          |   .add(Model, 'function2', [param1, param2])
          |   .runSerially()
          |   .success(function() { /* no problems :) */ })
          |   .error(function(err) { /* hmm not good :> */ })
          | &nbsp;
          | // and with options:
          | &nbsp;
          | new Sequelize.Utils.QueryChainer()
          |   .add(Model, 'function', [param1, param2], {
          |     // Will be executed before Model#function is called
          |     before: function(model) {},
          | &nbsp;
          |     /*
          |       Will be executed after Model#function was called
          |       and the function emitted a success or error event.
          |       If the following success option is passed, the function
          |       will be executed after the success function.
          |     */
          |     after: function(migration) {},
          | &nbsp;
          |     // Will be executed if Model#function emits a success event.
          |     success: function(migration, callback) {}
          |   })
          |   // skipOnError: don't execute functions once one has emitted an failure event.
          |   .runSerially({ skipOnError: true })
          |   .success(function() { /* no problems :) */ })
          |   .error(function(err) { /* hmm not good :> */ })

      p
        | If the success callbacks of the added methods are passing values&comma; they can be utilized in the actual
        code success
        | method of the query chainer&colon;
      pre.dark-blue
        code.javascript
          | chainer.add(Project.getTasks())
          | chainer.add(Project.getTeam())
          | chainer.run().success(function(results){
          |   var tasks = results[0]
          |   var team = results[1]
          | })

      h3#custom-event-emitter CustomEventEmitter
      p
        | One of the core components of the library is the <code>CustomEventEmitter</code>,
        | which takes an (asynchronous) function, allows the binding to certain events
        | and finally runs the passed function. Within the function, the user gets
        | access to the emitter instance and can (once the function's logic is done)
        | emit success / error events. The basic look is the following:
      pre.dark-blue
        code.javascript
          | new Sequelize.Utils.CustomEventEmitter(function(emitter) {
          |   doAsyncLogic(function(err) {
          |     if (err) {
          |       emitter.emit('error', err)
          |     } else {
          |       emitter.emit('success')
          |     }
          |   })
          | })
          | .success(function() { /* success! */ })
          | .error(function(err) { /* error */ })
          | .run()
      p
        | As you can probably see, the event observing is the very same
        | as for all the asynchronous methods in the Sequelize universe.
        | That's because every asynchronouse function in Sequelize
        | returns an instance of the CustomEventEmitter.
      p
        | If you are afraid, that the passed function might have been
        | executed already just before you bound the event observers:
        | The execution of the function is delayed minimally.
        | Because of that you can also just call <code>.run()</code>
        | and bind the events afterwards.
      p
        | Because there is a fair chance, that you already have an emitter
        | and you just want to pipe the events from one emitter to the other,
        | each instance has a method called <code>.proxy()</code>:
      pre.dark-blue
        code.javascript
          | new Sequelize.Utils.CustomEventEmitter(function(emitter) {
          |   asyncAuthLogic(function(err) {
          |     if (err) {
          |       return emitter.emit('err')
          |     }
          | &nbsp;
          |     Model
          |       .find()
          |       .proxy(emitter, { events: ['error'] })
          |       .success(function(result) {
          |         emitter.emit('success', parseInt(result.stringifiedAge, 10))
          |       })
          |   })
          | })
          | .error(function(err) { console.log(err) })
          | .success(function(ageAsInteger) { console.log(ageAsInteger) })
          | .run()
      p
        | In this example we first do an asynchronous authentication check,
        | receive an instance from the database afterwards and finally
        | transform its data. As we aren't interested in a special treatment
        | for the different error case, we will just observe the error event
        | once and pipe the error cases of the <code>Model.find()</code> call
        | to the outer emitter.
