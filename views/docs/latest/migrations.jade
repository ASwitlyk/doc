extends ../../layouts/with-sidebar

block documentation
  section
    div
      h2 CLI / Migrations

      p.
        Sequelize <code>2.0.0</code> introduces a new CLI which is based on
        <a href="http://gulpjs.com/" target="_blank" rel="nofollow">gulp</a>
        and combines
        <a href="https://github.com/sequelize/cli" target="_blank" rel="nofollow">sequelize-cli</a>
        and <a href="https://github.com/sequelize/gulp-sequelize" target="_blank" rel="nofollow">gulp-sequelize</a>.
        The CLI ships support for migrations and project bootstrapping. With migrations
        you can transfer your existing database into another state and vice versa:
        Those state transitions are saved in migration files, which describe the
        way how to get to the new state and how to revert the changes in order
        to get back to the old state.


      h3#cli The CLI
      p. In order to use the CLI you need to install the respective package:
      pre.dark-blue
        code.bash.
          npm install --save sequelize-cli

      p.
        The CLI currently supports the following commands:

      pre.dark-blue
        code.bash.
          sequelize db:migrate        # Run pending migrations.
          sequelize db:migrate:undo   # Revert the last migration run.
          sequelize help              # Display this help text.
          sequelize init              # Initializes the project.
          sequelize migration:create  # Generates a new migration file.
          sequelize version           # Prints the version number.

      p.
        Further and more detailled information about the available commands
        can be obtained via the help command:

      pre.dark-blue
        code.bash.
          sequelize help:init
          sequelize help:db:migrate
          sequelize help:db:migrate:undo
          # etc

      p.
        The latter one for example will print out the following output:

      pre.dark-blue
        code.bash.
          Sequelize [CLI: v0.0.2, ORM: v1.7.5]

          COMMANDS
              sequelize db:migrate:undo -- Revert the last migration run.

          DESCRIPTION
              Revert the last migration run.

          OPTIONS
              --env           The environment to run the command in. Default: development
              --options-path  The path to a JSON file with additional options. Default: none
              --coffee        Enables coffee script support. Default: false
              --config        The path to the config file. Default: config/config.json


      h3#skeleton Skeleton
      p
        | The following skeleton shows a typical migration file&period; All migrations are expected to be located in a folder called
        code migrations
        | at the very top of the project&period; Sequelize
        code 1&period;4&period;1
        | added the possibility to let the sequelize binary generate a migration skeleton&period; See the aboves section for more details&period;
      pre.dark-blue
        code.javascript
          | module.exports = {
          |   up: function(migration, DataTypes, done) {
          |     // logic for transforming into the new state
          |     done() // sets the migration as finished
          |   },
          | &nbsp;
          |   down: function(migration, DataTypes, done) {
          |     // logic for reverting the changes
          |     done() // sets the migration as finished
          |   }
          | }

      p
        | The passed
        code migration
        | object can be used to modify the database&period; The
        code DataTypes
        | object stores the available data types such as
        code STRING
        | or
        code INTEGER
        | &period; The third parameter is a callback function which needs to be called once everything was executed&period; The first parameter of the callback function can be used to pass a possible error&period; In that case&comma; the migration will be marked as failed&period; Here is some code&colon;
      pre.dark-blue
        code.javascript
          | module.exports = {
          |   up: function(migration, DataTypes, done) {
          |     migration.dropAllTables().complete(done)
          | &nbsp;
          |     // equals:
          |     migration.dropAllTables().complete(function(err) {
          |       if (err) {
          |         done(err)
          |       } else {
          |         done(null)
          |       }
          |     })
          |   }
          | }

      p The available methods of the migration object are the following&period;


      h3#functions Functions
      p
        | Using the
        code migration
        | object describe before&comma; you will have access to most of already introduced functions&period; Furthermore there are some other methods&comma; which are designed to actually change the database schema&period;
      h4#functions-createtable createTable&lpar;tableName&comma; attributes&comma; options&rpar;
      p
        | This method allows creation of new tables&period; It is allowed to pass simple or complex attribute definitions&period; You can define the encoding of the table and the table&apos;s engine via options
      pre.dark-blue
        code.javascript
          | migration.createTable(
          |   'nameOfTheNewTable',
          |   {
          |     id: {
          |       type: DataTypes.INTEGER,
          |       primaryKey: true,
          |       autoIncrement: true
          |     },
          |     createdAt: {
          |       type: DataTypes.DATE
          |     },
          |     updatedAt: {
          |       type: DataTypes.DATE
          |     },
          |     attr1: DataTypes.STRING,
          |     attr2: DataTypes.INTEGER,
          |     attr3: {
          |       type: DataTypes.BOOLEAN,
          |       defaultValue: false,
          |       allowNull: false
          |     }
          |   },
          |   {
          |     engine: 'MYISAM', // default: 'InnoDB'
          |     charset: 'latin1' // default: null
          |   }
          | )

      h4#functions-droptable dropTable&lpar;tableName&rpar;
      p This method allows deletion of an existing table&period;
      pre.dark-blue
        code.javascript
          | migration.dropTable('nameOfTheExistingTable')

      h4#functions-dropalltables dropAllTables&lpar;&rpar;
      p This method allows deletion of all existing tables in the database&period;
      pre.dark-blue
        code.javascript
          | migration.dropAllTables()

      h4#functions-renametable renameTable&lpar;before&comma; after&rpar;
      p This method allows renaming of an existing table&period;
      pre.dark-blue
        code.javascript
          | migration.renameTable('Person', 'User')

      h4#functions-showalltables showAllTables&lpar;&rpar;
      p This method returns the name of all existing tables in the database&period;
      pre.dark-blue
        code.javascript
          | migration.showAllTables().success(function(tableNames) {})

      h4#functions-describetable describeTable&lpar;tableName&rpar;
      p
        | This method returns an array of hashes containing information about all attributes in the table&period;
      pre.dark-blue
        code.javascript
          | migration.describeTable('Person').success(function(attributes) {
          |   /*
          |     attributes will be something like:
          | &nbsp;
          |     {
          |       name: {
          |         type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!
          |         allowNull:    true,
          |         defaultValue: null
          |       },
          |       isBetaMember: {
          |         type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!
          |         allowNull:    false,
          |         defaultValue: false
          |       }
          |     }
          |   */
          | })

      h4#functions-addcolumn addColumn&lpar;tableName&comma; attributeName&comma; dataTypeOrOptions&rpar;
      p
        | This method allows adding columns to an existing table&period; The data type can be simple or complex&period;
      pre.dark-blue
        code.javascript
          | migration.addColumn(
          |   'nameOfAnExistingTable',
          |   'nameOfTheNewAttribute',
          |   DataTypes.STRING
          | )
          | &nbsp;
          | // or
          | &nbsp;
          | migration.addColumn(
          |   'nameOfAnExistingTable',
          |   'nameOfTheNewAttribute',
          |   {
          |     type: DataTypes.STRING,
          |     allowNull: false
          |   }
          | )

      h4#functions-removecolumn removeColumn&lpar;tableName&comma; attributeName&rpar;
      p This method allows deletion of a specific column of an existing table&period;
      pre.dark-blue
        code.javascript
          | migration.removeColumn('Person', 'signature')

      h4#functions-changecolumn changeColumn&lpar;tableName&comma; attributeName&comma; dataTypeOrOptions&rpar;
      p
        | This method changes the meta data of an attribute&period; It is possible to change the default value&comma; allowance of null or the data type&period; Please make sure&comma; that you are completely describing the new data type&period; Missing information are expected to be defaults&period;
      pre.dark-blue
        code.javascript
          | migration.changeColumn(
          |   'nameOfAnExistingTable',
          |   'nameOfAnExistingAttribute',
          |   DataTypes.STRING
          | )
          | &nbsp;
          | // or
          | &nbsp;
          | migration.changeColumn(
          |   'nameOfAnExistingTable',
          |   'nameOfAnExistingAttribute',
          |   {
          |     type: DataTypes.FLOAT,
          |     allowNull: false,
          |     default: 0.0
          |   }
          | )

      h4#functions-renamecolumn renameColumn&lpar;tableName&comma; attrNameBefore&comma; attrNameAfter&rpar;
      p This methods allows renaming attributes&period;
      pre.dark-blue
        code.javascript
          | migration.renameColumn('Person', 'signature', 'sig')

      h4#functions-addindex addIndex&lpar;tableName&comma; attributes&comma; options&rpar;
      p
        | This methods creates indexes for specific attributes of a table&period; The index name will be automatically generated if it is not passed via in the options &lpar;see below&rpar;&period;
      pre.dark-blue
        code.javascript
          | // This example will create the index person_firstname_lastname
          | migration.addIndex('Person', ['firstname', 'lastname'])

      pre.dark-blue
        code.javascript
          | // This example will create a unique index with the name SuperDuperIndex using the optional 'options' field.
          | // Possible options:
          | // - indicesType: UNIQUE|FULLTEXT|SPATIAL
          | // - indexName: The name of the index. Default is <tableName>_<attrName1>_<attrName2>
          | // - parser: For FULLTEXT columns set your parser
          | // - indexType: Set a type for the index, e.g. BTREE. See the documentation of the used dialect
          | migration.addIndex(
          |   'Person',
          |   ['firstname', 'lastname'],
          |   {
          |     indexName: 'SuperDuperIndex',
          |     indicesType: 'UNIQUE'
          |   }
          | )

      h4#functions-removeindex removeIndex&lpar;tableName&comma; indexNameOrAttributes&rpar;
      p This method deletes an existing index of a table&period;
      pre.dark-blue
        code.javascript
          | migration.removeIndex('Person', 'SuperDuperIndex')
          | &nbsp;
          | // or
          | &nbsp;
          | migration.removeIndex('Person', ['firstname', 'lastname'])


      h3#programmatic-use Programmatic use
      p
        | If you need to interact with the migrator within your code,
        | you can easily achieve that via <code>sequelize.getMigrator</code>.
        | You can specify the path to your migrations as well as a pattern
        | which represents the files that contain the migrations.
      pre.dark-blue
        code.javascript
          | var migrator = sequelize.getMigrator({
          |   path:        process.cwd() + '/database/migrations',
          |   filesFilter: /\.coffee$/
          | })
      p
        | Once you have a migrator object, you can run its migration
        | with <code>migrator.migrate</code>. By default, this will
        | execute all the up methods within your pending migrations.
        | If you want to rollback a migration, just call it like this:
      pre.dark-blue
        code.javascript
          | migrator
          |   .migrate({ method: 'down' })
          |   .success(function() {
          |     // The migrations have been executed!
          |   })
