extends ../layout

block documentation
  section
    div
      h2 Usage

      h3#basics Basic usage

      p To get the ball rollin' you first have to create an instance of Sequelize. Use it the following way:

      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('database', 'username'[, 'password'])

      p This will save the passed database credentials and provide all further methods. Furthermore you can specify a non-default host/port:

      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('database', 'username', 'password', {
          |   host: "my.server.tld",
          |   port: 12345
          | })

      p If you just don't have a password:

      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('database', 'username')
          | // or
          | var sequelize = new Sequelize('database', 'username', null)

      p You can also use a connection string:

      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('mysql://user:pass@example.com:9821/dbname', {
          |   // Look to the next section for possible options
          | })

      h3#options Options

      p Besides the host and the port, Sequelize comes with a whole bunch of options. Here they are:

      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('database', 'username', 'password', {
          |   // custom host; default: localhost
          |   host: 'my.server.tld',
          |   &nbsp;
          |   // custom port; default: 3306
          |   port: 12345,
          |   &nbsp;
          |   // custom protocol
          |   // - default: 'tcp'
          |   // - added in: v1.5.0
          |   // - postgres only, useful for heroku
          |   protocol: null,
          |   &nbsp;
          |   // disable logging; default: console.log
          |   logging: false,
          |   &nbsp;
          |   // max concurrent database requests; default: 50
          |   maxConcurrentQueries: 100,
          |   &nbsp;
          |   // the sql dialect of the database
          |   // - default is 'mysql'
          |   // - currently supported: 'mysql', 'sqlite', 'postgres'
          |   dialect: 'mysql',
          |   &nbsp;
          |   // the storage engine for sqlite
          |   // - default ':memory:'
          |   storage: 'path/to/database.sqlite',
          |   &nbsp;
          |   // disable inserting undefined values as NULL
          |   // - default: false
          |   omitNull: true,
          |   &nbsp;
          |   // a flag for using a native library or not.
          |   // in the case of 'pg' -- set this to true will allow SSL support
          |   // - default: false
          |   native: true,
          |   &nbsp;
          |   // Specify options, which are used when sequelize.define is called.
          |   // The following example:
          |   //   define: {timestamps: false}
          |   // is basically the same as:
          |   //   sequelize.define(name, attributes, { timestamps: false })
          |   // so defining the timestamps for each model will be not necessary
          |   // Below you can see the possible keys for settings. All of them are explained on this page
          |   define: {
          |     underscored: false
          |     freezeTableName: false,
          |     syncOnAssociation: true,
          |     charset: 'utf8',
          |     collate: 'utf8_general_ci',
          |     classMethods: {method1: function() {}},
          |     instanceMethods: {method2: function() {}},
          |     timestamps: true
          |   },
          |   &nbsp;
          |   // similiar for sync: you can define this to always force sync for models
          |   sync: { force: true },
          |   &nbsp;
          |   // sync after each association (see below). If set to false, you need to sync manually after setting all associations. Default: true
          |   syncOnAssociation: true,
          |   &nbsp;
          |   // use pooling in order to reduce db connection overload and to increase speed
          |   // currently only for mysql and postgresql (since v1.5.0)
          |   pool: { maxConnections: 5, maxIdleTime: 30},
          |   &nbsp;
          |   // language is used to determine how to translate words into singular or plural form based on the [lingo project](https://github.com/visionmedia/lingo)
          |   // options are: en [default], es
          |   language: 'en'
          | })

      p
        strong Hint:
        | You can also define a custom function for the logging part. Just pass a function.
        | The first parameter will be the string that is logged.

      h3#read-replication Read replication

      p Sequelize supports read replication, i.e. having multiple servers that you can connect to when you want to do a SELECT query. When you do read replication, you specify one or more servers to act as read replicas, and one server to act as the write master, which handles all writes and updates and propagates them to the replicas (note that the actual replication process is <strong>not</strong> handled by Sequelize, but should be set up in MySql).

      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('database', null, null, {
          |   dialect: 'mysql',
          |   port: 3306
          |   replication: {
          |     read: [
          |       { host: '8.8.8.8', username: 'anotherusernamethanroot', password: 'lolcats!' },
          |       { host: 'localhost', username: 'root', password: null }
          |     ],
          |     write: { host: 'localhost', username: 'root', password: null }
          |   },
          |   pool: { // If you want to override the options used for the read pool you can do so here
          |     maxConnections: 20,
          |     maxIdleTime: 30000
          |   },
          | })

      p If you have any general settings that apply to all replicas you do not need to provide them for each instance. In the code above, database name and port is propagated to all replicas. The same will happen for user and password, if you leave them out for any of the replicas. Each replica has the following options: `host`, `port`, `username`, `password`, `database`

      p Sequelize uses a pool to manage connections to your replicas. The default options are:

      pre.dark-blue
        code.javascript
          | {
          |   maxConnections: 10,
          |   minConnections: 0,
          |   maxIdleTime:    1000
          | }

      p If you want to modify these, you can pass pool as an options when instantiating Sequelize, as shown above.

      p
        strong Note:
        | Read replication only works for MySQL at the moment!

      h3#dialects Dialects

      p With the release of Sequelize <code>v1.6.0</code>, the library got independent from specific dialects. That mean, that you'll have to add the respective dialect library yourself. Another option is the use of the sequelize packages that ship the dialect libraries as well.

      h4 MySQL

      p In order to get Sequelize working nicely together with MySQL, you'll need to install <code>mysql@~2.0.0-alpha7</code>. Once that's done you can use it like this:

      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('database', 'username', 'password', {
          |   // mysql is the default dialect, but you know...
          |   // for demo purporses we are defining it nevertheless :)
          |   // so: we want mysql!
          |   dialect: 'mysql'
          | })

      p Also possible is the use of <code>sequelize-mysql</code>. Just install it via <code>npm install sequelize-mysql</code> and use it like this:

      pre.dark-blue
        code.javascript
          | var Sequelize = require('sequelize-mysql').sequelize
          | var mysql     = require('sequelize-mysql').mysql
          | &nbsp;
          | var sequelize = new Sequelize('database', 'username', 'password', {
          |   // mysql is the default dialect, but you know...
          |   // for demo purporses we are defining it nevertheless :)
          |   // so: we want mysql!
          |   dialect: 'mysql'
          | })

      h4 SQLite

      p For SQLite compatibility you'll need <code>sqlite3@~2.1.5</code>. Configure Sequelize like this:

      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('database', 'username', 'password', {
          |   // sqlite! now!
          |   dialect: 'sqlite',
          | &nbsp;
          |   // the storage engine for sqlite
          |   // - default ':memory:'
          |   storage: 'path/to/database.sqlite'
          | })

      p If you want to use the bundled version, run <code>npm install sequelize-sqlite</code> and use the following code:

      pre.dark-blue
        code.javascript
          | var Sequelize = require('sequelize-sqlite').sequelize
          | var sqlite    = require('sequelize-sqlite').sqlite
          | &nbsp;
          |  var sequelize = new Sequelize('database', 'username', 'password', {
          |   dialect: 'sqlite',
          |   storage: 'path/to/database.sqlite'
          | })

      h4 PostgreSQL

      p The library for PostgreSQL is <code>pg@~2.0.0</code>. You'll just need to define the dialect:

      pre.dark-blue
        code.javascript
          | var sequelize = new Sequelize('database', 'username', 'password', {
          |   // gimme postgres, please!
          |   dialect: 'postgres'
          | })

      p In order to use the bundled version, use this <code>npm install sequelize-postgres</code> and require the lib this way:

      pre.dark-blue
        code.javascript
          | var Sequelize = require('sequelize-postgres').sequelize
          | var postgres  = require('sequelize-postgres').postgres
          | &nbsp;
          |  var sequelize = new Sequelize('database', 'username', 'password', {
          |   dialect: 'postgres'
          | })

      h3#raw-queries Executing raw SQL queries

      p As there are often use cases in which it is just easier to execute raw / already prepared SQL queries, you can utilize the function <code>sequelize.query</code>.

      p Here is how it works:

      pre.dark-blue
        code.javascript
          | // Arguments for raw queries
          | sequelize.query('your query', [, callee], [, options], [, replacements])
          | &nbsp;
          | // Quick example
          | sequelize.query("SELECT * FROM myTable").success(function(myTableRows) {
          |   console.log(myTableRows)
          | })
          | &nbsp;
          | // Callee is the model definition. This allows you to easily map a query
          | // to a predefined model for sequelizejs e.g:
          | sequelize.query('SELECT * FROM projects', Projects).success(function(projects){
          |   console.log(projects) // Each record will now be mapped to the Projects DAO/factory.
          | });
          | &nbsp;
          | /*
          | Options is an object with the following keys:
          | {
          |   logging: console.log, // a function (or false) for logging your queries
          |   plain: false,         // if plain is true, then sequelize will return all of the records within an array, otherwise it will return a single object/first record returned.
          |   raw: false            // Set this to true if you don't have a model definition for your query
          | }
          | */
          | &nbsp;
          | // Note the second argument being null!
          | // Even if we declared a callee here, the raw: true would supersede and return a raw object.
          | sequelize.query('SELECT * FROM projects', null, {raw: true}).success(function(projects) {
          |   console.log(projects)
          | })
          | &nbsp;
          | /*
          | Replacements in a query can be done in two different ways, either using named parameters (starting with :), or unnamed, represented by a ?
          | &nbsp;
          | The syntax used depends on the fourth argument passed to the function:
          |   * If an array is passed, ? will be replaced in the order that they appear in the array
          |   * If an object is passed, :key will be replaced with the keys from that object. If the object contains keys not found in the query or vice verca,
          |     an exception will be thrown.
          | */
          | sequelize.query('SELECT * FROM projects WHERE status = ?', null, {raw: true}, ['active']).success(function(projects) {
          |   console.log(projects)
          | })
          | &nbsp;
          | sequelize.query('SELECT * FROM projects WHERE status = :status ', null, {raw: true}, { status: 'active' }).success(function(projects) {
          |   console.log(projects)
          | })

      p
        strong One note:
        | If the attribute names of the table contain dots, the resulting objects will get a nesting:

      pre.dark-blue
        code.javascript
          | sequelize.query('select 1 as `foo.bar.baz`').success(function(rows) {
          |   console.log(JSON.stringify(rows))
          | &nbsp;
          |   /*
          |     [{
          |       "foo": {
          |         "bar": {
          |           "baz": 1
          |         }
          |       }
          |     }]
          |   */
          | })
