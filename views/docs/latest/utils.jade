extends ../../layouts/with-sidebar

block documentation
  section
    div
      h2 Utils

      p
        | Sequelize comes with some handy utils including references to
        code lodash
        | as well as some individual helpers&period; You can access them via
        code Sequelize&period;Utils
        | &period;


      h3#lodash-js Lodash.js
      p You can access all the methods of lodash like this&colon;
      pre.dark-blue
        code.javascript
          | Sequelize.Utils._.each(/* ... */)
          | Sequelize.Utils._.map(/* ... */)
          | Sequelize.Utils._...

      p
        | Also Sequelize ships the Underscore extension
        code underscore&period;string
        | &comma; which allows nifty string manipulation&colon;
      pre.dark-blue
        code.javascript
          | Sequelize.Utils._.camelize('something') // Something

      p
        | Check out the page of&nbsp;
        a(href='http://lodash.com/', rel='nofollow', target='_blank') Lodash
        | &comma;&nbsp;
        a(href='http://underscorejs.org/', rel='nofollow', target='_blank') Underscore
        | &nbsp;and&nbsp;
        a(href='https://github.com/epeli/underscore.string', rel='nofollow', target='_blank') underscore&period;string
        | &nbsp;for further information&period;


      h3#querychainer QueryChainer
      p
        | Because you will want to save&sol;create&sol;delete several items at once and just go on after all of them are saved&comma; Sequelize provides the
        code QueryChainer
        | module&period; It can be used like this&colon;
      pre.dark-blue
        code.javascript
          | var chainer = new Sequelize.Utils.QueryChainer
          | chainer.add(/* Query | EventEmitter */)
          | chainer.run().success(function(){}).error(function(errors){})

      p And a real world example&colon;
      pre.dark-blue
        code.javascript
          | var chainer = new Sequelize.Utils.QueryChainer
          | var Task    = sequelize.define('Task', /* ... */)
          | &nbsp;
          | chainer
          |   .add(Task.drop())
          |   .add(Task.sync())
          | &nbsp;
          | for(var i = 0; i < 20; i++)
          |   chainer.add(Task.create({}))
          | &nbsp;
          | chainer
          |   .run()
          |   .success(function(){})
          |   .error(function(errors){})

      p
        | It is also possible to force a serial run of the query chainer by using the following syntax&colon;
      pre.dark-blue
        code.javascript
          | new Sequelize.Utils.QueryChainer()
          |   .add(Model, 'function', [param1, param2])
          |   .add(Model, 'function2', [param1, param2])
          |   .runSerially()
          |   .success(function() { /* no problems :) */ })
          |   .error(function(err) { /* hmm not good :> */ })
          | &nbsp;
          | // and with options:
          | &nbsp;
          | new Sequelize.Utils.QueryChainer()
          |   .add(Model, 'function', [param1, param2], {
          |     // Will be executed before Model#function is called
          |     before: function(model) {},
          | &nbsp;
          |     /*
          |       Will be executed after Model#function was called
          |       and the function emitted a success or error event.
          |       If the following success option is passed, the function
          |       will be executed after the success function.
          |     */
          |     after: function(migration) {},
          | &nbsp;
          |     // Will be executed if Model#function emits a success event.
          |     success: function(migration, callback) {}
          |   })
          |   // skipOnError: don't execute functions once one has emitted an failure event.
          |   .runSerially({ skipOnError: true })
          |   .success(function() { /* no problems :) */ })
          |   .error(function(err) { /* hmm not good :> */ })

      p
        | If the success callbacks of the added methods are passing values&comma; they can be utilized in the actual
        code success
        | method of the query chainer&colon;
      pre.dark-blue
        code.javascript
          | chainer.add(Project.getTasks())
          | chainer.add(Project.getTeam())
          | chainer.run().success(function(results){
          |   var tasks = results[0]
          |   var team = results[1]
          | })


