extends ../../layouts/with-sidebar

block documentation
  section
    div
      h2 State of v1.7.0

      <!-- <img src="http://farm3.staticflickr.com/2306/1992019542_709ca81523.jpg" alt="...non fidarsi Ã¨ meglio - my scared cat / gatto" data-author="Paolo Margari" data-page="http://www.flickr.com/photos/paolomargari/1992019542/" data-source="flickr" class="span12"> -->

      h3 Teaser
      p
        | Since the release of <code>v1.6.0</code> in April 2013, many new features have
        | been added to Sequelize. This was mostly possible due to the great
        | help of the community. Furthermore <a href="https://github.com/durango" target="_blank" rel="nofollow">Daniel Durante</a>
        | joined us in May, who is a big help everyday and will be glad to help
        | everyone who joins our IRC channel.

      p
        | This post is about the features, that have been added since April
        | and that are currently available in the current NPM package <code>v1.7.0-alpha2</code>.

      h3 [DEPENDENCIES] Upgraded validator for IPv6 support
      p
        | The <a href="https://github.com/chriso/node-validator" target="_blank" rel="nofollow">validator</a>
        | plugin has been updated to <code>1.1.1</code>. Part of the new version
        | is the possibility to check for proper IPv6 addresses. You can use it like this:

      pre.dark-blue
        code.javascript
          | Sequelize.define('model', {
          |   ip: {
          |     type:     Sequelize.STRING,
          |     validate: {
          |       isIPv6: true
          |     }
          |   }
          | })

      h3 [DEPENDENCIES] replaced underscore by lodash
      p
        | In order to improve performance of the library, we replaced
        | <a href="http://underscorejs.org" target="_blank" rel="nofollow">underscore.js</a>
        | with the faster drop-in-replacement
        | <a href="http://lodash.com" target="_blank" rel="nofollow">lodash</a>
        | . You can access it via the already existing way <code>Sequelize.Utils._</code>.

      h3 [FEATURE] Validate a model before it gets saved
      p
        | Many people requested, that the model needs to be validated before
        | it gets saved. This is now the case. So whenever the <code>save</code>
        | method gets called on an object, the model is validated and the
        | <code>error</code> callback is triggered if the model isn't valid:

      pre.dark-blue
        code.javascript
          | sequelize.define('user', {
          |   username: {
          |     type:     Sequelize.STRING,
          |     validate: {
          |       notEmpty: true,
          |       notNull:  true
          |     }
          |   }
          | }).create({
          |   username: ''
          | }).error(function(errors) {
          |   console.log(errors) // { username: [ 'String is empty' ] }
          | })

      h3 [FEATURE] Schematics
      p
        | It is now possible to create schemas for postgres respectively to
        | prefix table names for sqlite and mysql. That means that you can
        | now define tables in different scopes:

      pre.dark-blue
        code.javascript
          | var User   = sequelize.define('user', { username: Sequelize.STRING })
          |   , wpUser = User.schema('wordpress', '_')
          | &nbsp;
          | sequelize.createSchema('wordpress').success(function() {
          |   sequelize.sync().success(function() {
          |     // Sequelize will now create the following tables: `wordpress_users`
          |   })
          | })

      h3 [FEATURE] Foreign key constraints
      p
        | It is now possible to define foreign keys to connect tables / models
        | with each other. The following snippet connects the <code>Post</code> model with
        | the <code>Author</code> model.

      pre.dark-blue
        code.javascript
          | var Author = sequelize.define('author', { first_name: Sequelize.STRING })
          | var Post   = sequelize.define('post', {
          |   title:    Sequelize.STRING,
          |   authorId: {
          |     type:          Sequelize.INTEGER,
          |     references:    Author,
          |     referencesKey: "id"
          |   }
          | })
          | &nbsp;
          | Author.hasMany(Post)
          | Post.belongsTo(Author)

      p
        | Also we can now define reactions of certain events. E.g.
        | what should happen to the associated objects after a
        | <code>delete</code> operation, etc. This is the way to do it:

      pre.dark-blue
        code.javascript
          | var Author = sequelize.define('author', { first_name: Sequelize.STRING })
          | var Post   = sequelize.define('post', {
          |   title: Sequelize.STRING,
          |   authorId: {
          |     type:          Sequelize.INTEGER,
          |     references:    'authors',
          |     referencesKey: 'id',
          |     onDelete:      'cascade'
          |   }
          | })
          | &nbsp;
          | Author.hasMany(Post)
          | Post.belongsTo(Author)
          | &nbsp;
          | sequelize.sync().success(function() {
          |   new Sequelize.Utils.QueryChainer()
          |     .add(Author.create({ first_name: 'John' }))
          |     .add(Post.create({ title: 'news' }))
          |     .add(Post.create({ title: 'milestone reached' }))
          |     .run()
          |     .success(function(results) {
          |       var author    = results[0]
          |         , news      = results[1]
          |         , milestone = results[2]
          | &nbsp;
          |       author.setPosts([ news, milestone ]).success(function() {
          |         author.destroy()
          |         /*
          |           At this point, you won't find any authors and posts in the database anymore,
          |           as we have dropped the only author and due to the cascade option every related
          |           posts of him.
          |         */
          |       })
          |     })
          | })

      h3 [FEATURE] Support for bulk insert/update/delete
      p
        | In order to minimize the number of SQL requests while
        | creating/updating/deleting a bunch of entries, we introduced bulk support.

      p
        | This is how creation of multiple instances is possible while just
        | triggering a single SQL statement:

      pre.dark-blue
        code.javascript
          | var User = sequelize.define('User', { name: Sequelize.STRING })
          | &nbsp;
          | User.sync({ force: true }).success(function() {
          |   var userData = [
          |     { name: 'John' },
          |     { name: 'Jane' },
          |     { name: 'Pete' }
          |   ]
          | &nbsp;
          |   User.bulkCreate(userData).success(function() {
          |     // We just created 3 users with just a single SQL statement <3
          |   })
          | })

      p In order to update a bunch of entries we can utilize the <code>update</code> method:

      pre.dark-blue
        code.javascript
          | User.update({ name: 'Foo' }, '`name` LIKE "J%"').success(function() {
          |   // All users thats name used to start with "J" is now called "Foo" :)
          | })

      p Last but not least we can delete all entries matching certain criteria:

      pre.dark-blue
        code.javascript
          | User.bulkCreate([
          |   { name: 'John' },
          |   { name: 'Jane' },
          |   { name: 'Pete' }
          | ]).success(function() {
          |   User.destroy('`name` LIKE "J%"').success(function() {
          |     // We just deleted all rows that have a name starting with "J"
          |   })
          | })

      h3 [FEATURE] Added convenient data types
      p
        | Costent added support for advanced data types. For example, you
        | are now able to define a column as unsigned, zerofilled integer
        | having a length of 6:

      pre.dark-blue
        code.javascript
          | var User = sequelize.define("user", {
          |   streetNumber: Sequelize.INTEGER(6).ZEROFILL.UNSIGNED
          | })

      p
        | Also we have added <code>BIGINT</code>, <code>DECIMAL</code>,
        | <code>ENUM</code>, <code>ARRAY</code> and some other things.
        | <a href="/docs/latest/models#data-types">They are nicely documented over here.</a>

      h3 [FEATURE] Binary is more verbose now
      p
        | <a href="https://github.com/terraflubb" target="_blank" rel="nofollow">Rob Fletcher</a>
        | made the Sequelize binary a bit more talkative, when it comes to errors or misusage.

      h3 [FEATURE] Promises/A support
      p
        | In order to make chaining of events easier and smoother,
        | Sequelize now has support for Promises/A. Just call <code>then</code> instead
        | of reacting on the usual events:

      pre.dark-blue
        code.javascript
          | var User = sequelize.define("user", {
          |   username: Sequelize.STRING
          | })
          | &nbsp;
          | User
          |   .sync({ force: true })
          |   .then(function() { return User.create({ username: 'John' }) })
          |   .then(function(john) { return User.create({ username: 'Jane' }) })
          |   .then(function(jane) { return User.create({ username: 'Pete' }) })
          |   .then(function(pete) {
          |     console.log("we just created 3 users :)")
          |     console.log("this is pete:")
          |     console.log(pete.values)
          |   })

      h3 [FEATURE] Added Getters/Setters method for DAO

      p
        | Virtual attributes have been introduced and allows you, to e.g.
        | set a first/last name based on a name respectively to do the vice versa way:

      pre.dark-blue
        code.javascript
          | var User = sequelize.define("user", {
          |   first_name: Sequelize.STRING,
          |   last_name:  Sequelize.STRING
          | }, {
          |   setterMethods: {
          |     name: function(s) {
          |       this.first_name = s.split(" ")[0]
          |       this.last_name  = s.split(" ")[1]
          |     }
          |   },
          | &nbsp;
          |   getterMethods: {
          |     name: function() {
          |       return [this.first_name, this.last_name].join(" ")
          |     }
          |   }
          | })
          | &nbsp;
          | User
          |   .sync({ force: true })
          |   .then(function() {
          |     return User.create({ name: 'John Doe' })
          |   })
          |   .then(function(john) {
          |     console.log("Let's welcome:", john.first_name, john.last_name)
          |     // Let's welcome: John Doe
          |   })

      h3 [FEATURE] Added model wide validations
      p
        | In addition to the already existing possibilities of validating certain
        | single attributes, the current version adds support for instance wide
        | validations. It utilizes the <code>validate</code> option of the model definition:

      pre.dark-blue
        code.javascript
          | var User = sequelize.define("User", {
          |   username: {
          |     type: Sequelize.STRING,
          |     validate: { notEmpty: true }
          |   },
          |   password:              Sequelize.STRING,
          |   password_confirmation: Sequelize.STRING
          | }, {
          |   validate: {
          |     passwordEquality: function() {
          |       if (this.password !== this.password_confirmation) {
          |         throw new Error("Passwords aren't equal!")
          |       }
          |     }
          |   }
          | })
          | &nbsp;
          | User
          |   .sync({ force: true })
          |   .then(function() {
          |     User.create({
          |       username:              'john',
          |       password:              'test',
          |       password_confirmation: 'tst'
          |     }).error(function(err) {
          |       console.log(err)
          |       // { passwordEquality: [ 'Passwords aren\'t equal!' ] }
          |     })
          |   })

      h3 Bug-Fixes
      ul
        li
          | [BUG] Fix string escape with postgresql on raw SQL queries.
          | <a href="https://github.com/sequelize/sequelize/pull/586" target="_blank" rel="nofollow">#586</a>
        li
          | [BUG] "order by" is now after "group by".
          | <a href="https://github.com/sequelize/sequelize/pull/585" target="_blank" rel="nofollow">#585</a>
        li
          | [BUG] Added decimal support for min/max.
          | <a href="https://github.com/sequelize/sequelize/pull/583" target="_blank" rel="nofollow">#583</a>
        li
          | [BUG] Null dates don't break SQLite anymore.
          | <a href="https://github.com/sequelize/sequelize/pull/572" target="_blank" rel="nofollow">#572</a>
        li
          | [BUG] Correctly handle booleans in MySQL.
          | <a href="https://github.com/sequelize/sequelize/pull/608" target="_blank" rel="nofollow">#608</a>
        li
          | [BUG] Fixed empty where conditions in MySQL.
          | <a href="https://github.com/sequelize/sequelize/pull/619" target="_blank" rel="nofollow">#619</a>
        li
          | [BUG] Allow overriding of default columns.
          | <a href="https://github.com/sequelize/sequelize/pull/635" target="_blank" rel="nofollow">#635</a>

