Sequelize v1.3.0 introduced migrations. With those mechanism you can transform your existing database into another state and vice versa. Those state transitions are saved in migration files, which describe the way how to get to the new state and how to revert the changes in order to get back to the old state.<br><br>

<a name="binary" data-title="The sequelize binary"></a>
<h3>The sequelize binary</h3>
In order to run migrations, sequelize comes with a handy binary file which can setup your project and run migrations. The following snippet shows the possible things:

<pre>
<span class="string">sequelize</span> <span class="class">-h</span>
<span class="string">sequelize</span> <span class="class">--help</span>
--> prints the help

<span class="string">sequelize</span> <span class="class">-V</span>
<span class="string">sequelize</span> <span class="class">--version</span>
--> prints the version

<span class="string">sequelize</span> <span class="class">-i</span>
<span class="string">sequelize</span> <span class="class">--init</span>
--> creates a migration folder
--> creates a config folder
--> saves a config.json inside the config folder

<span class="string">sequelize</span> <span class="class">-i -f</span>
<span class="string">sequelize</span> <span class="class">--init --force</span>
--> forced creation of migration and config folder
--> existing data will be deleted first

<span class="string">sequelize</span> <span class="class">-m</span>
<span class="string">sequelize</span> <span class="class">--migrate</span>
--> needs a valid config.json
--> runs pending migrations
--> saves successfully executed migrations inside the database

<span class="string">sequelize</span> <span class="class">-m -u</span>
<span class="string">sequelize</span> <span class="class">--migrate --undo</span>
--> needs a valid config.json
--> reverts the last successfull migration
--> when there were multiple executed migrations, all of them are reverted
</pre>

<a name="skeleton" data-title="Migration template"></a>
<h3>Migration template</h3>
The following skeleton shows a typical migration file. All migrations are expected to be located in a folder called "migrations" at the very top of the project.

<pre><%- koala(".js", partial("code/migrations/skeleton.ejs")) %></pre>

The passed "migration" object can be used to modify the database. The DataTypes object stores the available data types such as STRING or INTEGER. The available methods of the migration object are the following.

<%
  var migrationMethods = [
    {
      name: 'createTable',
      params: ['tableName', 'attributes', 'options'],
      description: "This method allows creation of new tables. It is allowed to pass simple or complex attribute definitions. You can define the encoding of the table and the table's engine via options."
    }, {
      name: 'dropTable',
      params: ['tableName'],
      description: 'This method allows deletion of an existing table.'
    }, {
      name: 'dropAllTables',
      params: [],
      description: 'This method allows deletion of all existing tables in the database.'
    }, {
      name: 'renameTable',
      params: ['before', 'after'],
      description: 'This method allows renaming of an existing table.'
    }, {
      name: 'showAllTables',
      params: [],
      description: 'This method returns the name of all existing tables in the database.'
    }, {
      name: 'describeTable',
      params: ['tableName'],
      description: 'This method returns an array of hashes containing information about all attributes in the table.'
    }, {
      name: 'addColumn',
      params: ['tableName', 'attributeName', 'dataTypeOrOptions'],
      description: 'This method allows adding columns to an existing table. The data type can be simple or complex.'
    }, {
      name: 'removeColumn',
      params: ['tableName', 'attributeName'],
      description: 'This method allows deletion of a specific column of an existing table'
    }, {
      name: 'changeColumn',
      params: ['tableName', 'attributeName', 'dataTypeOrOptions'],
      description: "This method changes the meta data of an attribute. It is possible to change the default value, allowance of null or the data type. Please make sure, that you are completely describing the new data type. Missing information are expected to be defaults."
    }, {
      name: 'renameColumn',
      params: ['tableName', 'attrNameBefore', 'attrNameAfter'],
      description: 'This methods allows renaming attributes.'
    }, {
      name: 'addIndex',
      params: ['tableName', 'attributes', 'options'],
      description: "This methods creates indexes for specific attributes of a table. The index name will be automatically generate if it is not passed via in the options (indexName)."
    }, {
      name: 'showIndex',
      params: ['tableName', 'options'],
      description: 'This method returns all indexes on the table.'
    }, {
      name: 'removeIndex',
      params: ['tableName', 'indexNameOrAttributes'],
      description: 'This method deletes an existing index of a table.'
    }
  ]
%>

<% migrationMethods.forEach(function(migrationMethod) { %>
  <a name="<%= migrationMethod.name %>"></a>
  <h3><%= migrationMethod.name %>(<%= migrationMethod.params.join(', ') %>)</h3>
  <%= migrationMethod.description %>
  <pre><%- koala(".js", partial("code/migrations/" + migrationMethod.name + ".ejs")) %></pre>
<% }) %>
